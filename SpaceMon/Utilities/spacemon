#!/usr/bin/env perl
#
# spacemon - client side utility for CMS Space Monitoring
# 
# Intended functionality: 
#  * Parces and aggregates storage dump file 
#  * Creates a record object for space monitoring 
#  * Downloads TFC and CMS namespace conventions
#  * Maps directories to CMS data types 
#  * Uploads record to dmwmmon database, or saves to a local file for later upload
#    (default: print to stdout)
#
# See project page for details:
#            https://twiki.cern.ch/twiki/bin/view/CMSPublic/CompProjSpaceMon
#
############################################################################

use strict;
use warnings;
use FindBin;
use lib "$FindBin::RealBin/../../..";
use Carp;
use Data::Dumper;
use File::Basename;
use Getopt::Long qw /:config pass_through /;

use DMWMMON::SpaceMon::NamespaceConfig;
use DMWMMON::SpaceMon::FormatFactory;
use DMWMMON::SpaceMon::StorageDump;
use DMWMMON::SpaceMon::Aggregate;
use DMWMMON::SpaceMon::RecordIO;
use DMWMMON::SpaceMon::Core;

my $me = basename($0);

# Variables for handling command line options:
my ($defaults, $debug, $verbose, $upload, $save, $show, $url, $node,
     $storagedump, $configfile, $testnode, $ignorebadentries, $strict);
# Here you can override class defaults:
$debug = $verbose = 0;
# Variables for spacemon objects:
my ($dumpfile, $parser, $record, $rio, $config);

sub vPrint{
    my $text = shift;
    $verbose && print "$me: " . $text . "\n";
}

# Call usage help if used with no arguments:
 &usage if ( @ARGV == 0 );

# Check useful for packaging. Print dependencies and exit:
GetOptions("deps|d" => sub {print Dumper(%INC); exit;});

# Make sure authentication options are processed before the check_auth is called
&DMWMMON::SpaceMon::UserAgent::auth_getoptions();

GetOptions (
    # various query options that print out information and exit:
    'help|h' => sub { &usage },
    'version'=> sub { print "$me version: " .
			  DMWMMON::SpaceMon::Core::version()."\n";
		      exit;},
    'defaults' => sub { &show_defaults },
    'check-auth' => sub { &check_auth },
    # SpaceMon mandatory options:
    'node=s' => \$node,
    'dump=s' => \$storagedump,
    # Options to override the defaults:
    'ignore-bad-entries' => \$ignorebadentries,
    'upload-record' => \$upload,
    'test' => \$testnode,
    'debug!' => \$debug,  # enables --nodebug option
    'verbose!' => \$verbose,
    'strict!' => \$strict, # use --nostrict to overwrite existing record
    'url=s' => \$url,
    'config:s' => \$configfile,
    # Options for additional actions:
    'save-record:s'   => \$save,
    'show-record'   => \$show,
    );

sub usage
{
    my $ver = DMWMMON::SpaceMon::Core::version();
    print <<EOF;
  $me - client side utility for CMS Space Monitoring.
    Version:  $ver

Usage:
  $me --node <name> --dump <file> [--upload-record|--save-record|--show-record] [<options>]
  $me --help|-h
  $me --version
  $me --check-auth
  $me --defaults

Input options:
  --dump  <file>          storage dump file
  --node  <name>          node name to upload space usage data

Output and verbosity control options:
  --upload-record         upload record to central data store
  --save-record <file>    save record to a file instead of printing to STDOUT
  --show-record           print record in STDOUT in human readable format
  --verbose|--noverbose   turn on/off printout about processing steps
  --debug|--nodebug       turn on/off lots of debugging printout

Overriding defaults:
  --url                   overrides default data service url
  --config      <file>    read local configuration rules from the file
  --ignore-bad-entries    do not stop on parsing errors due to bad entries in storage dump
EOF
;
    &DMWMMON::SpaceMon::UserAgent::auth_usage();
    exit 0;
}

sub check_auth 
{
    # Check  Authentication: 
    print "$me: Checking authentication\n" if $verbose;
    my $smua = DMWMMON::SpaceMon::UserAgent->new (
	'URL'      => $url,
	'FORMAT'   => 'perl',
	'DEBUG'    => $debug,
	'VERBOSE'  => $verbose,
	);
    print $smua->get_auth();
    exit;
}

sub show_defaults
{
# Print out defaults :  
#   - configuration rules
#   - location of the user config file
#   - verbosity settings
#   - upload url
# 
# TODO: show configuration in different formats: a set of rules, or a resulting NamespaceConfig tree object.
    print "$me " . DMWMMON::SpaceMon::Core::version(). " defaults:\n";
    print Data::Dumper->Dump ([&DMWMMON::SpaceMon::NamespaceConfig::default_rules()],
			      [qw(GLOBAL_RULES)]);
    exit;
}

if ( defined $configfile ) {
  if ( -f $configfile ) {
    $config->{'USERCONF'} = $configfile;
  } else {
    if ($configfile) { 
      die "ERROR: configuration file \"$configfile\" does not exist\n";
    } else {
      die "ERROR: option --config requires an argument: file name \n";
    }
  }
}

$config = DMWMMON::SpaceMon::NamespaceConfig->new
    ( 
      DEBUG => $debug,
      VERBOSE => $verbose,
      USERCONF => $configfile,
      NODE => $node,
    );

$dumpfile = DMWMMON::SpaceMon::FormatFactory->instantiate
(
 DEBUG => $debug,
 VERBOSE => $verbose,
 DUMPFILE => $storagedump,
 IGNOREBADENTRIES => $ignorebadentries,
);

print $dumpfile->dump() if $debug;
#$dumpfile->formattingHelp();

$parser = DMWMMON::SpaceMon::Aggregate->new
    (
     DEBUG   => $debug,
     VERBOSE => $verbose,
     CONFIG  => $config,
    );

print "Using parsing algorithm: \n", $parser->dump() if $debug;
$record = $parser->createRecord($config, $dumpfile);
$node && $record->setNodeName($node);

# Override the given node by T2_Test_Buffer to be able to test upload
# without uploading record for a real node:
$testnode && $record->setNodeName('T2_Test_Buffer');

print "Dump record returned by a parser: ", $record->dump(), "\n" if $debug;

$rio = DMWMMON::SpaceMon::RecordIO->new(
    STRICT  => $strict,
    DEBUG   => $debug,
    VERBOSE => $verbose,
    DATASVC => $url,
    );


if ($debug) {
# To validate the Record object write it to a file, then read back and compare
    $verbose && print "Validating Record object: write/read from the file...\n";
    my $tmp_rec_file='/tmp/record.save-in-file-test';
    $rio->writeToFile($record, $tmp_rec_file);
    my $rec_from_file = $rio->readFromFile($tmp_rec_file);
    $verbose && print $rec_from_file->dump();
    if ( ! $rec_from_file->matches($record)) {    
	$upload = 0;
	print "WARNING: the Record failed validation. Will not upload!\n";
	print "DETAILS: the Record read from the file does not match the original Record.\n";
    }
}

# The resulting Record is printed to STDOUT, unless explicitly asked to 
# save it to a file using  --save-record  option: 
if ($save) {
    $rio->writeToFile($record, $save);    
} else {
    print $record->dump();
}

if ($show) {
    $rio->show($record);
}

if ($upload) {
    $rio->upload($record);
}
